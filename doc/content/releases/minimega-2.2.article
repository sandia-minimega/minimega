minimega 2.2 release notes

* Introduction

The minimega development team is pleased to announce the release of minimega
2.2. This release includes numerous bugfixes and tweaks to the 2.1 release, as
well as support for the container VM type.

* What's new

** Major changes and milestones

*** vm launch container

The most notable feature of this release is the support for a new VM type:
containers. Now, minimega environments may include a mixture of KVM VMs and
containers. Containers can be launched in a similar fashion to KVM VMs:
`vm`launch`container`1`.

See the [[/articles/containers.article][containers]] guide for more
information.

*** file: prefix

To make it easier to reference files stored in iomeshage, the meshage-based
file transfer layer provided by minimega, we have added a `file:` prefix that
can be used anywhere minimega expected a file. For example, if a remote node
has a file `foo.qcow2`, and you want to use it locally as a disk image:

	vm config disk file:foo.qcow2

This will cause minimega to automatically fetch `foo.qcow2` from the remote
node before executing the command. See the [[/articles/file.article][file]]
guide for more information.

*** miniccc on by default

miniccc over serial has been enabled by default for all VMs. See the
[[/articles/tutorials/cc.article][cc]] tutorial for more information.

*** detecting version mismatches

minimega and miniccc have both been updated to include checks for the remote
client versions during their handshakes. This may affect users in two ways. If
a cluster is running multiple versions of minimega, minimega will warn the
user. Likewise, minimega will warn the user if it connects to miniccc running
in a VM whose version does not match minimega's.

These changes will alert the user much sooner about a version mismatch and
prevent subtle bugs in experiments due to version mismatches.

*** minicli validation

Our plan for minicli was to have it validate the registered command patterns to
detect ambiguous patterns but that did not get implemented in the initial
release of minicli. In this release, we have added pattern validation to
minicli. When minimega is invoked with the `-cli` flag, it first validates the
patterns before dumping a JSON-formatted object describing the command API.

As a result of adding this validation, we uncovered several ambiguous APIs
within minimega. Specifically, the `tap`, `capture`, and `host` patterns
have been updated to remove ambiguities.

*** protonuke improvements

We have made several improvements to protonuke including several bug fixes.
protonuke now allows the user to specify the size of the generated images and
set a custom certificate for the HTTPS server.

*** miniccc process management

Previously, miniccc would fire off processes and not retain any information
about them. miniccc now keeps track of the PIDs of the launched processes so
that you can list them and kill them, if needed.

** Additional new features

*** disk API

The `vm`inject` has been refactored into the new `disk` API. Specifically, the
old functionality has been split between `disk`snapshot` and `disk`inject`.
Additionally, we have added `disk`create` to allow users to create images from
within minimega.

*** dnsmasq API improvements

The `dnsmasq` API has been improved to allow static configuration of IPs and
DNS entries. Users can now define static IP allocations, specify a hostname to
IP mapping for DNS, or set DHCP options. See `help`dnsmasq` for details.

Note that these improvements rely on `dnsmasq` version 2.73 or higher.

*** vnc playback file

minimega supports a new action in stored vnc kb files: `LoadFile`. When a vnc
playback is in process and it encounters this action, playback will continue
with all the actions in the loaded file, returning to the original file after
all actions have been completed. Users may want to use this to discretize the
actions in their playback files (e.g. `unlock screen`, `open browser`, ...).

*** minitest improvements

minitest, the minimega test framework, has been improved to add support for
prologs and epilogs. These files are run before and after all test files,
respectively, and run commands that prepare minimega for tests and clean up
afterwards. Additionally, we have added several new tests to test newer
features.

*** vmbetter for containers

vmbetter now supports building a simple rootfs for containers.

*** log filter API

The `log` API has been extended to include `log`filter` that filters lines
containing the provided strings. Currently, only exact matches are supported.

*** tap reaper

The introduction of containers necessitated a new approach to cleaning up taps
once VMs no longer need them. minimega now uses a mark/sweep approach to delete
taps. Users may notice taps persisting for a short time until the next sweep.

*** Tab completion gets better

In 2.1, we added tab completion for minimega commands. In 2.2, we've made a
small improvement to the tab completion so that the longest common prefix of
the remaining completions is automatically added to the line when you strike
the TAB key.

Leveraging the new `file:` API described above, we are also able to complete
filenames across the mesh. Simply strike the TAB key for a filename prefixed by
`file:` to see the list of possible completions.

* Availability

minimega is available in several ways, both as pre-built distributions and
source. See the [[/articles/installing.article][installing]] guide for more
information.

** Debian package

minimega is available as an x86-64 debian package, available
[[https://storage.googleapis.com/minimega-files/minimega-2.2.deb][here]]. It is
known to work in debian 7 (wheezy) and 8 (testing/jessie).

** tarball

A pre-built, x86-64 distribution is available in a single distributable tarball
[[https://storage.googleapis.com/minimega-files/minimega-2.2.tar.bz2][here]].
It should be sufficient to simply unpack the tarball and run tools from the
`bin/` directory directly. Most default paths in minimega, vmbetter, and other
tools are built to be used in this way (i.e. `bin/minimega`, which will then
look for the web directory in `misc/web`).

** Building from source

Source of the entire distribution is available on
[[https://github.com/sandia-minimega/minimega][github]]. Follow the directions
for cloning or forking minimega on github.com. In order to build minimega, you
will need a Go 1.3+ compiler, libreadline, and libpcap headers.
