// Copyright 2016-2021 National Technology & Engineering Solutions of Sandia, LLC (NTESS).
// Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government retains certain
// rights in this software.

package main

const headerTemplate = `
// Code generated by "vmconfiger {{ .Args }}"; DO NOT EDIT

package {{ .Package }}

import (
	"bytes"
	"fmt"
	"io"
	"github.com/sandia-minimega/minimega/v2/pkg/minicli"
	"strconv"
)

var vmconfigerCLIHandlers = []minicli.Handler{
`

const stringTemplate = `{
	HelpShort: "configures {{ .ConfigName }}",
	HelpLong: ` + "`{{ .Doc }}`," + `
	Patterns: []string{
		"vm config {{ .ConfigName }} [value]",
	},
	{{ if .Suggest }}
	Suggest: {{ .Suggest }},
	{{ end }}
	Call: wrapSimpleCLI(func (ns *Namespace, c *minicli.Command, r *minicli.Response) error {
		if len(c.StringArgs) == 0 {
			r.Response = ns.vmConfig.{{ .Field }}
			return nil
		}

		{{ if .Validate }}
		if err := {{.Validate}}(ns.vmConfig, c.StringArgs["value"]); err != nil {
			return err
		}
		{{ end }}

		{{ if .Path }}
		v := checkPath(c.StringArgs["value"])

		ns.vmConfig.{{ .Field }} = v
		{{ else }}
		ns.vmConfig.{{ .Field }} = c.StringArgs["value"]
		{{ end }}

		return nil
	}),
},
`

const sliceTemplate = `{
	HelpShort: "configures {{ .ConfigName }}",
	HelpLong: ` + "`{{ .Doc }}`," + `
	Patterns: []string{
		"vm config {{ .ConfigName }} [value]...",
	},
	{{ if .Suggest }}
	Suggest: {{ .Suggest }},
	{{ end }}
	Call: wrapSimpleCLI(func (ns *Namespace, c *minicli.Command, r *minicli.Response) error {
		if len(c.ListArgs) == 0 {
			if len(ns.vmConfig.{{ .Field }}) == 0 {
				return nil
			}

			r.Response = fmt.Sprintf("%v", ns.vmConfig.{{ .Field }})
			return nil
		}
		{{ if .Validate }}
		for _, v := range c.ListArgs["value"] {
			if err := {{.Validate}}(ns.vmConfig, v); err != nil {
				return err
			}
		}
		{{ end }}

		{{ if .Path }}
		vals := c.ListArgs["value"]

		for i := range vals {
			vals[i] = checkPath(vals[i])
		}

		ns.vmConfig.{{ .Field }} = vals
		{{ else }}
		ns.vmConfig.{{ .Field }} = c.ListArgs["value"]
		{{ end }}

		return nil
	}),
},
`

const mapTemplate = `{
	HelpShort: "configures {{ .ConfigName }}",
	HelpLong: ` + "`{{ .Doc }}`," + `
	Patterns: []string{
		"vm config {{ .ConfigName }}",
		"vm config {{ .ConfigName }} <key> [value]",
	},
	{{ if .Suggest }}
	Suggest: {{ .Suggest }},
	{{ end }}
	Call: wrapSimpleCLI(func (ns *Namespace, c *minicli.Command, r *minicli.Response) error {
		if c.StringArgs["key"] == "" {
			var b bytes.Buffer

			for k, v := range ns.vmConfig.{{ .Field }} {
				fmt.Fprintf(&b, "%v -> %v\n", k, v)
			}

			r.Response = b.String()
			return nil
		}

		if c.StringArgs["value"] == "" {
			if ns.vmConfig.{{ .Field }} != nil {
				r.Response = ns.vmConfig.{{ .Field }}[c.StringArgs["value"]]
			}
			return nil
		}

		if ns.vmConfig.{{ .Field }} == nil {
			ns.vmConfig.{{ .Field }} = make(map[string]string)
		}

		{{ if .Validate }}
		if err := {{.Validate}}(ns.vmConfig, c.StringArgs["key"], c.StringArgs["value"]); err != nil {
			return err
		}
		{{ end }}


		{{ if .Path }}
		v := checkPath(c.StringArgs["value"])

		ns.vmConfig.{{ .Field }}[c.StringArgs["key"]] = v
		{{ else }}
		ns.vmConfig.{{ .Field }}[c.StringArgs["key"]] = c.StringArgs["value"]
		{{ end }}

		return nil
	}),
},
`

// numTemplate handles int64 and uint64
const numTemplate = `{
	HelpShort: "configures {{ .ConfigName }}",
	HelpLong: ` + "`{{ .Doc }}`," + `
	Patterns: []string{
		"vm config {{ .ConfigName }} [value]",
	},
	{{ if .Suggest }}
	Suggest: {{ .Suggest }},
	{{ end }}
	Call: wrapSimpleCLI(func (ns *Namespace, c *minicli.Command, r *minicli.Response) error {
		if len(c.StringArgs) == 0 {
			{{- if .Signed }}
			r.Response = strconv.FormatInt(ns.vmConfig.{{ .Field }}, 10)
			{{- else }}
			r.Response = strconv.FormatUint(ns.vmConfig.{{ .Field }}, 10)
			{{- end }}
			return nil
		}

		{{ if .Signed -}}
		i, err := strconv.ParseInt(c.StringArgs["value"], 10, 64)
		{{- else }}
		i, err := strconv.ParseUint(c.StringArgs["value"], 10, 64)
		{{- end }}
		if err != nil {
			return err
		}

		{{ if .Validate }}
		if err := {{.Validate}}(ns.vmConfig, i); err != nil {
			return err
		}
		{{ end }}

		ns.vmConfig.{{ .Field }} = i

		return nil
	}),
},
`

const boolTemplate = `{
	HelpShort: "configures {{ .ConfigName }}",
	HelpLong: ` + "`{{ .Doc }}`," + `
	Patterns: []string{
		"vm config {{ .ConfigName }} [true,false]",
	},
	Call: wrapSimpleCLI(func (ns *Namespace, c *minicli.Command, r *minicli.Response) error {
		if len(c.BoolArgs) == 0 {
			r.Response = strconv.FormatBool(ns.vmConfig.{{ .Field }})
			return nil
		}

		ns.vmConfig.{{ .Field }} = c.BoolArgs["true"]

		return nil
	}),
},
`

const clearTemplate = `{
	HelpShort: "reset one or more configurations to default value",
	Patterns: []string{
		"clear vm config",
		{{- range . }}
		"clear vm config <{{ .ConfigName }},>",
		{{- end }}
	},
	Call: wrapSimpleCLI(func (ns *Namespace, c *minicli.Command, r *minicli.Response) error {
		// at most one key will be set in BoolArgs but we don't know what it
		// will be so we have to loop through the args and set whatever key we
		// see.
		mask := Wildcard
		for k := range c.BoolArgs {
			mask = k
		}

		ns.vmConfig.Clear(mask)

		return nil
	}),
},
`

const funcsTemplate = `
{{ range $type, $fields := . }}
func (v *{{ $type }}) Info(field string) (string, error) {
	{{- range $fields }}
		if field == "{{ .ConfigName }}" {
			{{- if eq .Type "string" }}
			return v.{{ .Field }}, nil
			{{- else if eq .Type "uint64" }}
			return strconv.FormatUint(v.{{ .Field }}, 10), nil
			{{- else if eq .Type "bool" }}
			return strconv.FormatBool(v.{{ .Field }}), nil
			{{- else }}
			return fmt.Sprintf("%v", v.{{ .Field }}), nil
			{{- end }}
		}
	{{- end }}

	return "", fmt.Errorf("invalid info field: %v", field)
}

func (v *{{ $type }} ) Clear(mask string) {
	{{- range $fields }}
		if mask == Wildcard || mask == "{{ .ConfigName }}" {
			v.{{ .Field }} = {{ .Default }}
		}
	{{- end }}
}

func (v *{{ $type }} ) WriteConfig(w io.Writer) error {
	{{- range $fields }}
		{{- if eq .Type "bool" }}
			if v.{{ .Field }} != {{ .Default }} {
				fmt.Fprintf(w, "vm config {{ .ConfigName }} %t\n", v.{{ .Field }})
			}
		{{- else if eq .Type "map" }}
			for k, v := range v.{{ .Field }} {
				fmt.Fprintf(w, "vm config {{ .ConfigName }} %v %v\n", k, v)
			}
		{{- else if eq .Type "string" "int64" "uint64"}}
			if v.{{ .Field }} != {{ .Default }} {
				fmt.Fprintf(w, "vm config {{ .ConfigName }} %v\n", v.{{ .Field }})
			}
		{{- else if eq .Type "slice"}}
			if len(v.{{ .Field }}) > 0 {
				fmt.Fprintf(w, "vm config {{ .ConfigName }} %v\n", quoteJoin(v.{{ .Field }}, " "))
			}
		{{- else }}
			if err := v.{{ .Field }}.WriteConfig(w); err != nil {
				return err
			}
		{{- end }}
	{{- end }}

	return nil
}
{{ end }}
`
